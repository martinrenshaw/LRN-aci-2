---
- name: TOP LEVEL PLAY - CREATE ACI STUFF
  hosts: apicProd
  connection: local
  gather_facts: False

  vars:
    env: PROD

  tasks:
    - name: Task 1 - Read vars from csv file
      read_csv:
        path: 01__aci_tenant_network_vars.csv
        key: keyid
      register: CSV_list
      tags: sub

    - name: Task 2 - ENSURE TENANT EXISTS
      aci_tenant:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ item.value.tenantz }}"
        description: "TENANT Created Using Ansible"
        output_level: debug
      loop: "{{ lookup('dict', CSV_list.dict) }}"
      when: item.value.taskid == 'task2'
      loop_control:
        label: "{{ item.value.tenantz }}"

    - name: Task 3 - ENSURE TENANT VRF EXISTS
      aci_vrf:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ item.value.tenantz }}"
        vrf: "{{ item.value.vrfz }}"
        description: "{{ env }} VRF Created Using Ansible"
        output_level: debug
      loop: "{{ lookup('dict', CSV_list.dict) }}"
      when: item.value.taskid == 'task3'
      loop_control:
        label: "{{ item.value.vrfz }}"

    - name: Task 4 - ENSURE TENANT BRIDGE DOMAIN EXISTS
      tags: BDE
      aci_bd:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.value.tenantz }}"
        bd: "{{env}}-{{ item.value.bdz | default('prod_bd') }}"
        vrf: "{{ item.value.vrfz }}"
        description: "BD Created Using Ansible"
        output_level: debug
      loop: "{{ lookup('dict', CSV_list.dict) }}"
      when: item.value.taskid == 'task4'
      loop_control:
        label: "{{ item.value.bdz }}"
      
#   This was to help debug the DICT output # http://www.mydailytutorials.com/ansible-register-variables/
##`    - name: show loop of CSV_list
##`      debug:
##`        msg: "VRF is {{item.value.vrfz}} tenant is {{item.value.tenantz}} BD is {{item.value.bdz}}"
##`      loop: "{{ lookup('dict', CSV_list.dict)}}"
##      tags: BDE

    - name: Task 4 - ENSURE TENANT SUBNET EXISTS
      aci_bd_subnet:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.value.tenantz }}"
        bd: "{{env}}-{{ item.value.bdz | default('prod_bd') }}"
        subnet_name: "{{ item.value.bdz }}"
        gateway: "{{ item.value.gatewayz }}"
        mask: 24
        scope: "public"
        description: "Subnet Created Using Ansible"
        output_level: debug
      loop: "{{ lookup('dict', CSV_list.dict) }}"
      when: item.value.taskid == 'task4'
      tags: sub

    - name: Task 5 - L3out Test
      aci_l3out:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: grey-COMMON
        name: prod_l3out
        description: "L3out for grey-COMMON Created Using Ansible"
        domain: l3dom_prod
        vrf: grey-COMMON-vrf1
        l3protocol: ospf,bgp
        route_control: export
        asn: 100
        output_level: debug
      tags: L3out

    - name: Task 6 - L3out to BD Test
      aci_bd_to_l3out:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: grey-COMMON
        l3out: prod_l3out
        bd: "{{env}}-BD01"
#        description: "L3out for grey-COMMON Created Using Ansible"
#        domain: l3dom_prod
#        vrf: grey-COMMON-vrf1
#        l3protocol: ospf,bgp
#        route_control: export
#        asn: 100
        output_level: debug
      tags: L3out


## -- https://developer.cisco.com/learning/tracks/aci-programmability/ansible-aci-intro/aci_ansible_part3/step/2
